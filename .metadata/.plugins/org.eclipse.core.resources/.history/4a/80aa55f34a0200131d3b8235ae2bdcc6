package net.sssanma.spice.core.parts;

import javax.annotation.PostConstruct;

import net.sssanma.spice.core.Time;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseWheelListener;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.GCData;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Pattern;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Slider;

import swing2swt.layout.BorderLayout;

import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;

public class TimelinePart {
	private Canvas timeLine;
	private int maxX = 100;
	private int leftMargin = 20;
	private int rightMargin = 20;
	private Time currentTime;
	private int zoomLevel = 1;
	private int maxZoomLevel = 5;
	private Slider verticalSlider;
	private Slider horizonalSlider;
	private int fps = 60;
	private int metorSpace = 60;

	@PostConstruct
	public void createComposite(final Composite parent) {
		parent.setLayout(new BorderLayout(0, 0));
		timeLine = new Canvas(parent, SWT.NONE);
		
		horizonalSlider = new Slider(parent, SWT.NONE);
		horizonalSlider.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				timeLine.redraw();
			}
		});
		horizonalSlider.setLayoutData(BorderLayout.SOUTH);
		
		verticalSlider = new Slider(parent, SWT.VERTICAL);
		verticalSlider.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				timeLine.redraw();
			}
		});
		verticalSlider.setLayoutData(BorderLayout.EAST);
		timeLine.addPaintListener(new PaintListener() {
			
			@Override
			public void paintControl(PaintEvent e) {
				redraw(e.gc);
			}
		});
		parent.addMouseWheelListener(new MouseWheelListener() {
			

			@Override
			public void mouseScrolled(MouseEvent e) {
				if (e.count == 0) return;
				
				// ズーム前のマウスの位置
				int beforeMouseX = horizonalSlider.getSelection() + e.x;
				// マウスがある位置のフレーム
				double beforeSelectFrame = (double)beforeMouseX / getZoom();

				if (e.count > 0 && zoomLevel + 1 <= maxZoomLevel) {
					zoomLevel += 1;
				} else if (e.count < 0 && zoomLevel - 1 >= 1){
					zoomLevel -= 1;
				}
				
				// ズーム前に選択されていたフレームのズーム後の位置
				double afterSelectFrameX = beforeSelectFrame * getZoom();
				// ズーム後のスライダーの位置
				int afterSliderX = (int) (afterSelectFrameX - e.x);
				
				horizonalSlider.setMaximum(maxX * zoomLevel);
				horizonalSlider.setSelection(afterSliderX);
				
				horizonalSlider.setIncrement(e.count > 0 ? horizonalSlider.getIncrement() + 1 : horizonalSlider.getIncrement() - 1);
				timeLine.redraw();
			}
		});
	}
	
	private long timeToPx(Time time) {
		return time.getCurrentFrame() * getZoom();
	}
	private Time pxToTime(long px) {
		return new Time(fps, px / getZoom());
	}
	private void redraw(GC gc) {
		Point max = timeLine.getSize();
		Image temp = new Image(gc.getDevice(), max.x, max.y);
		GC tempGC = new GC(temp);
		drawMetor(tempGC);
		drawTimeLine(tempGC);
		gc.drawImage(temp , 0, 0);
		tempGC.dispose();
		temp.dispose();
	}
	private void drawMetor(GC gc) {
		Point max = timeLine.getSize();
		int canvasLeftPosX = horizonalSlider.getSelection();
		int canvasRightPosX = canvasLeftPosX + max.x;
		int fontMaxY = gc.getFontMetrics().getHeight();
		Time canvasLeftTime = pxToTime(canvasLeftPosX);
		Time canvasRightTime = pxToTime(canvasRightPosX);
		
		int margin = (int) (canvasLeftPosX - pxToTime(canvasLeftPosX).getCurrentFrame() * metorSpace);
		int renderMaxX = canvasRightPosX + 100;
		Time baseTime = pxToTime(margin + horizonalSlider.getSelection());
		System.out.println(pxToTime(canvasLeftPosX).getCurrentFrame() * metorSpace);
//		switch(zoomLevel) {
//			default:
//				for (int i = margin; i < renderMaxX; i+=metorSpace) {
//					String formattedTime = pxToTime(i + horizonalSlider.getSelection()).toTime();
//					Point strSize = gc.textExtent(formattedTime);
//					gc.drawString(formattedTime, i - strSize.x / 2, 0);
//					gc.drawLine(i, fontMaxY - 2, i, fontMaxY + 3);
//				}
//		}
//		
		
		
		//		int j = 3;
//		int x;
//		for (int i = horizonalSlider.getSelection() / metorSpace; (x = i * metorSpace  - horizonalSlider.getSelection()) < max.x ; i++) {
//			if (j % 3 == 0) {
//				String formattedTime = pxToTime(x + horizonalSlider.getSelection()).toTime();
//				Point strSize = gc.textExtent(formattedTime);
//				gc.drawString(formattedTime, x - strSize.x / 2, 0);
//				gc.drawLine(x, fontMaxY - 2, x, fontMaxY + 3);
//			} else {
//				gc.drawLine(x, fontMaxY + 1, x, fontMaxY + 3);
//			}
//			j++;
//		}
//		int x;
//		int j = 0;
//		for (int i = horizonalSlider.getSelection() / getZoom(); (x = i * metorSpace - horizonalSlider.getSelection()) < max.x ; i++) {
//			if (i % metorSpace == 0) {
//				if (j % 3 == 0) {
//					gc.drawLine(x, fontMaxY - 1, x, fontMaxY + 3);
//					String formattedTime = pxToTime(x + horizonalSlider.getSelection()).toTime();
//					Point strSize = gc.textExtent(formattedTime);
//					gc.drawString(formattedTime, x - strSize.x / 2, 0);
//				} else {
//					gc.drawLine(x, fontMaxY + 1, x, fontMaxY + 3);
//				}
//				j++;
//			}
//		}
	}
	private int getZoom() {
		return (int) Math.round(Math.pow(2., zoomLevel));
	}
	private void drawTimeLine(GC gc) {
		Point max = timeLine.getSize();
		

		int fontMaxY = gc.getFontMetrics().getHeight();
		int contentsStartY = fontMaxY + 3;
		
		gc.setBackground(new Color(gc.getDevice(), new RGB(255, 255, 255)));
		gc.fillRectangle(0, 0, 65, 21);
		
		gc.setForeground(new Color(gc.getDevice(), new RGB(0, 0, 0)));
		// コンテンツとの区切り線
		gc.drawLine(0, contentsStartY, max.x, contentsStartY);
		
		gc.drawLine(65, 0, 65, max.y);

		// コンテンツのレイヤー線
		for (int i = 0; i * 25 < max.y; i++) {
			int y = i * 25 + contentsStartY;
			gc.setForeground(new Color(gc.getDevice(), new RGB(0, 0, 0)));
			gc.drawLine(0, y, max.x, y);
			gc.setBackground(new Color(gc.getDevice(), new RGB(255, 255, 255)));
			// レイヤー表示
			gc.fillRectangle(0, y + 1, 64, 24);
			gc.drawString("レイヤ"+i, 5, y + gc.textExtent("レイヤ"+i).y / 4);
		}
		
	}
}
